module EasyMailer
  module Viewer
    module Adapter

      # This viewer adapter is designed to be used with the files stored by the :files Mail delivery
      # method provide by the class ::Mail::FilesMailer. mail_dir and mail_path_tpl must match the
      # corresponding settings in ::Mail::FilesMailer to have it working.
      class FilesAdapter

        attr_accessor :settings

        def initialize(options={})
          self.settings = {
              dir: defined?(Rails.root) ? "#{Rails.root}/tmp/mails" : "#{Dir.tmpdir}/mails",
              path_tpl: File.join(':mailer', ':model', ':recipient', ':message_id'),
              header_mailer: 'mailer',
              header_model: 'model'
          }.merge(options)
        end

        def process(mail, processor_options={})
          if mail.delivery_method.is_a?( ::Mail::FilesMailer ) &&
              mail.delivery_method.settings[:dir] == self.settings[:dir] &&
              mail.delivery_method.settings[:path_tpl] == self.settings[:path_tpl]

            mail.header[mail.delivery_method.settings[:header_model]] = processor_options[:model]
            mail.header[mail.delivery_method.settings[:header_mailer]] = processor_options[:mailer]

            # Nothing to do, it will already be saved as expected in options
          else
            mail.header[self.settings[:header_model]] = processor_options[:model]
            mail.header[self.settings[:header_mailer]] = processor_options[:mailer]

            ::Mail::FilesMailer.new(self.settings).deliver!(mail)
          end
        end

        # options.mailer
        # options.model
        # options.recipient
        # options.mail_id
        def where(filters={})
          index = []

          mail_path_tpl = settings[:path_tpl]
                              .split(File::SEPARATOR)
                              .reject {|a| a.nil? || a.strip.length == 0} # remove nil generated by double separators or separators @ end or start of path
                              .map {|a| a.slice!(':'); a.to_sym}

          files_where(filters) do |mail_path|

            file = File.new(mail_path)

            mail_path.slice!(Rails.root.join(settings[:dir]).to_s)

            mail_path = mail_path
                            .split(File::SEPARATOR)
                            .reject {|a| a.nil? || a.strip.length == 0} # remove nil generated by double separators or separators @ end or start of path

            next if mail_path_tpl.length > mail_path.length

            headers = {date: file.ctime}

            mailer_extra_length = 0
            mail_path_tpl.each_with_index do |key, ix|
              if key == :mailer
                mailer_extra_length = mail_path.length - mail_path_tpl.length
                headers[sym_to_header(key)] = mail_path[ix..ix+mailer_extra_length].join(File::SEPARATOR)
              else
                case key
                  when :message_id
                    headers['Message-Id'] = mail_path[ix + mailer_extra_length]
                  when :recipient
                    headers[:to] = mail_path[ix + mailer_extra_length]
                  else
                    headers[sym_to_header(key)] = mail_path[ix + mailer_extra_length]
                end
              end
            end

            index << ::Mail.new(to: headers.delete(:to), headers: headers)
          end
          index
        end

        def find(mail_id)
          file = Dir.glob(Rails.root.join(EasyMailer.mail_dir, '**', mail_id)).first
          file = file ? File.open(file) : nil

          begin
            ::Mail.read(file)
          rescue => e
            nil
          end
        end

        private
        def sym_to_header(sym)
          "Easy-#{sym.to_s.split('_').map{|a| a.camelize }.join('-')}"
        end

        # Creates a path pattern to be used with Dir.glob() and to match every mail files
        # according to the filters passed in arguments
        def search_path(filters = {})
          Rails.root.join(self.settings[:dir], self.settings[:path_tpl]).to_s
              .gsub(':mailer', filters[:mailer] || '**')
              .gsub(':model', filters[:model] || '*')
              .gsub(':recipient', filters[:recipient] || '*')
              .gsub(':message_id', filters[:mail_id] || '*')
        end

        def files_where(filters={}, &block)
          Dir[search_path(filters)].each &block
        end
      end
    end
  end
end